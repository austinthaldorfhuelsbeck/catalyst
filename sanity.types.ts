/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type NavItem = {
  _type: 'nav-item';
  page?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'page';
  };
  title?: string;
  hideFromHeader?: boolean;
  hideFromFooter?: boolean;
  subMenu?: Array<
    {
      _key: string;
    } & NavItem
  >;
};

export type AllTags = {
  _type: 'all-tags';
  padding?: SectionPadding;
  colorVariant?:
    | 'background'
    | 'primary'
    | 'secondary'
    | 'card'
    | 'accent'
    | 'destructive'
    | 'muted';
  sectionWidth?: 'default' | 'narrow';
  stackAlign?: 'left' | 'center';
};

export type AllPosts = {
  _type: 'all-posts';
  padding?: SectionPadding;
  colorVariant?:
    | 'background'
    | 'primary'
    | 'secondary'
    | 'card'
    | 'accent'
    | 'destructive'
    | 'muted';
  sectionWidth?: 'default' | 'narrow';
  stackAlign?: 'left' | 'center';
};

export type FormNewsletter = {
  _type: 'form-newsletter';
  padding?: SectionPadding;
  colorVariant?:
    | 'background'
    | 'primary'
    | 'secondary'
    | 'card'
    | 'accent'
    | 'destructive'
    | 'muted';
  sectionWidth?: 'default' | 'narrow';
  stackAlign?: 'left' | 'center';
  consentText?: string;
  buttonText?: string;
  successMessage?: string;
};

export type Faqs = {
  _type: 'faqs';
  padding?: SectionPadding;
  colorVariant?:
    | 'background'
    | 'primary'
    | 'secondary'
    | 'card'
    | 'accent'
    | 'destructive'
    | 'muted';
  sectionWidth?: 'default' | 'narrow';
  stackAlign?: 'left' | 'center';
  faqs?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'faq';
  }>;
};

export type LogoCloud1 = {
  _type: 'logo-cloud-1';
  padding?: SectionPadding;
  colorVariant?:
    | 'background'
    | 'primary'
    | 'secondary'
    | 'card'
    | 'accent'
    | 'destructive'
    | 'muted';
  sectionWidth?: 'default' | 'narrow';
  stackAlign?: 'left' | 'center';
  title?: string;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
    _key: string;
  }>;
};

export type Cta1 = {
  _type: 'cta-1';
  padding?: SectionPadding;
  colorVariant?:
    | 'background'
    | 'primary'
    | 'secondary'
    | 'card'
    | 'accent'
    | 'destructive'
    | 'muted';
  sectionWidth?: 'default' | 'narrow';
  stackAlign?: 'left' | 'center';
  tagLine?: string;
  title?: string;
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          isExternal?: boolean;
          internalLink?:
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'page';
              }
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'post';
              };
          href?: string;
          target?: boolean;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
    | {
        videoId?: string;
        _type: 'youtube';
        _key: string;
      }
    | ({
        _key: string;
      } & Code)
  >;
  links?: Array<
    {
      _key: string;
    } & Link
  >;
};

export type Timelines1 = {
  _type: 'timelines-1';
  title?: string;
  tagLine?: string;
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          isExternal?: boolean;
          internalLink?:
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'page';
              }
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'post';
              };
          href?: string;
          target?: boolean;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
    | {
        videoId?: string;
        _type: 'youtube';
        _key: string;
      }
    | ({
        _key: string;
      } & Code)
  >;
};

export type TimelineRow = {
  _type: 'timeline-row';
  padding?: SectionPadding;
  colorVariant?:
    | 'background'
    | 'primary'
    | 'secondary'
    | 'card'
    | 'accent'
    | 'destructive'
    | 'muted';
  sectionWidth?: 'default' | 'narrow';
  stackAlign?: 'left' | 'center';
  timelines?: Array<
    {
      _key: string;
    } & Timelines1
  >;
};

export type Carousel2 = {
  _type: 'carousel-2';
  padding?: SectionPadding;
  colorVariant?:
    | 'background'
    | 'primary'
    | 'secondary'
    | 'card'
    | 'accent'
    | 'destructive'
    | 'muted';
  sectionWidth?: 'default' | 'narrow';
  stackAlign?: 'left' | 'center';
  testimonial?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'testimonial';
  }>;
};

export type Carousel1 = {
  _type: 'carousel-1';
  padding?: SectionPadding;
  colorVariant?:
    | 'background'
    | 'primary'
    | 'secondary'
    | 'card'
    | 'accent'
    | 'destructive'
    | 'muted';
  sectionWidth?: 'default' | 'narrow';
  stackAlign?: 'left' | 'center';
  size?: 'one' | 'two' | 'three';
  indicators?: 'none' | 'dots' | 'count';
  images?: Array<{
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
    _key: string;
  }>;
};

export type GridRow = {
  _type: 'grid-row';
  padding?: SectionPadding;
  colorVariant?:
    | 'background'
    | 'primary'
    | 'secondary'
    | 'card'
    | 'accent'
    | 'destructive'
    | 'muted';
  sectionWidth?: 'default' | 'narrow';
  stackAlign?: 'left' | 'center';
  gridColumns?: 'grid-cols-2' | 'grid-cols-3' | 'grid-cols-4';
  columns?: Array<
    | ({
        _key: string;
      } & GridCard)
    | ({
        _key: string;
      } & GridPost)
    | ({
        _key: string;
      } & PricingCard)
  >;
};

export type GridPost = {
  _type: 'grid-post';
  post?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'post';
  };
};

export type PricingCard = {
  _type: 'pricing-card';
  title?: string;
  tagLine?: string;
  price?: {
    value?: number;
    period?: string;
  };
  list?: Array<string>;
  excerpt?: string;
  link?: Link;
};

export type GridCard = {
  _type: 'grid-card';
  title?: string;
  excerpt?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  link?: Link;
};

export type SplitInfo = {
  _type: 'split-info';
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  title?: string;
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          isExternal?: boolean;
          internalLink?:
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'page';
              }
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'post';
              };
          href?: string;
          target?: boolean;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
    | {
        videoId?: string;
        _type: 'youtube';
        _key: string;
      }
    | ({
        _key: string;
      } & Code)
  >;
  tags?: Array<string>;
};

export type SplitInfoList = {
  _type: 'split-info-list';
  list?: Array<
    {
      _key: string;
    } & SplitInfo
  >;
};

export type SplitImage = {
  _type: 'split-image';
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
};

export type SplitCard = {
  _type: 'split-card';
  tagLine?: string;
  title?: string;
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          isExternal?: boolean;
          internalLink?:
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'page';
              }
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'post';
              };
          href?: string;
          target?: boolean;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
    | {
        videoId?: string;
        _type: 'youtube';
        _key: string;
      }
    | ({
        _key: string;
      } & Code)
  >;
};

export type SplitCardsList = {
  _type: 'split-cards-list';
  list?: Array<
    {
      _key: string;
    } & SplitCard
  >;
};

export type SplitContent = {
  _type: 'split-content';
  sticky?: boolean;
  padding?: SectionPadding;
  colorVariant?:
    | 'background'
    | 'primary'
    | 'secondary'
    | 'card'
    | 'accent'
    | 'destructive'
    | 'muted';
  tagLine?: string;
  title?: string;
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          isExternal?: boolean;
          internalLink?:
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'page';
              }
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'post';
              };
          href?: string;
          target?: boolean;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
    | {
        videoId?: string;
        _type: 'youtube';
        _key: string;
      }
    | ({
        _key: string;
      } & Code)
  >;
  link?: Link;
};

export type SplitRow = {
  _type: 'split-row';
  padding?: SectionPadding;
  colorVariant?:
    | 'background'
    | 'primary'
    | 'secondary'
    | 'card'
    | 'accent'
    | 'destructive'
    | 'muted';
  sectionWidth?: 'default' | 'narrow';
  stackAlign?: 'left' | 'center';
  noGap?: boolean;
  splitColumns?: Array<
    | ({
        _key: string;
      } & SplitContent)
    | ({
        _key: string;
      } & SplitCardsList)
    | ({
        _key: string;
      } & SplitImage)
    | ({
        _key: string;
      } & SplitInfoList)
  >;
};

export type SectionHeader = {
  _type: 'section-header';
  padding?: SectionPadding;
  colorVariant?:
    | 'background'
    | 'primary'
    | 'secondary'
    | 'card'
    | 'accent'
    | 'destructive'
    | 'muted';
  sectionWidth?: 'default' | 'narrow';
  stackAlign?: 'left' | 'center';
  tagLine?: string;
  title?: string;
  description?: string;
};

export type Hero2 = {
  _type: 'hero-2';
  tagLine?: string;
  title?: string;
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          isExternal?: boolean;
          internalLink?:
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'page';
              }
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'post';
              };
          href?: string;
          target?: boolean;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
    | {
        videoId?: string;
        _type: 'youtube';
        _key: string;
      }
    | ({
        _key: string;
      } & Code)
  >;
  links?: Array<
    {
      _key: string;
    } & Link
  >;
};

export type Hero1 = {
  _type: 'hero-1';
  tagLine?: string;
  title?: string;
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          isExternal?: boolean;
          internalLink?:
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'page';
              }
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'post';
              };
          href?: string;
          target?: boolean;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
      }
    | {
        videoId?: string;
        _type: 'youtube';
        _key: string;
      }
    | ({
        _key: string;
      } & Code)
  >;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  links?: Array<
    {
      _key: string;
    } & Link
  >;
};

export type SectionPadding = {
  _type: 'section-padding';
  top?: boolean;
  bottom?: boolean;
};

export type ButtonVariant = 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';

export type ColorVariant =
  | 'background'
  | 'primary'
  | 'secondary'
  | 'card'
  | 'accent'
  | 'destructive'
  | 'muted';

export type Link = {
  _type: 'link';
  isExternal?: boolean;
  internalLink?:
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'page';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'post';
      };
  title?: string;
  href?: string;
  target?: boolean;
  buttonVariant?: ButtonVariant;
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        isExternal?: boolean;
        internalLink?:
          | {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'page';
            }
          | {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'post';
            };
        href?: string;
        target?: boolean;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: 'image';
      _key: string;
    }
  | {
      videoId?: string;
      _type: 'youtube';
      _key: string;
    }
  | ({
      _key: string;
    } & Code)
>;

export type Settings = {
  _id: string;
  _type: 'settings';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  logo?: {
    dark?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    light?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    width?: number;
    height?: number;
  };
  siteName?: string;
  copyright?: BlockContent;
};

export type Navigation = {
  _id: string;
  _type: 'navigation';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  navItems?: Array<
    {
      _key: string;
    } & NavItem
  >;
};

export type Testimonial = {
  _id: string;
  _type: 'testimonial';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  title?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  body?: BlockContent;
  rating?: number;
  orderRank?: string;
};

export type Faq = {
  _id: string;
  _type: 'faq';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  body?: BlockContent;
  orderRank?: string;
};

export type Tag = {
  _id: string;
  _type: 'tag';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  color?: Color;
  body?: BlockContent;
  meta_title?: string;
  meta_description?: string;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  noindex?: boolean;
  orderRank?: string;
};

export type Page = {
  _id: string;
  _type: 'page';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  blocks?: Array<
    | ({
        _key: string;
      } & Hero1)
    | ({
        _key: string;
      } & Hero2)
    | ({
        _key: string;
      } & SectionHeader)
    | ({
        _key: string;
      } & SplitRow)
    | ({
        _key: string;
      } & GridRow)
    | ({
        _key: string;
      } & Carousel1)
    | ({
        _key: string;
      } & Carousel2)
    | ({
        _key: string;
      } & TimelineRow)
    | ({
        _key: string;
      } & Cta1)
    | ({
        _key: string;
      } & LogoCloud1)
    | ({
        _key: string;
      } & Faqs)
    | ({
        _key: string;
      } & FormNewsletter)
    | ({
        _key: string;
      } & AllPosts)
    | ({
        _key: string;
      } & AllTags)
  >;
  meta_title?: string;
  meta_description?: string;
  noindex?: boolean;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  orderRank?: string;
};

export type Post = {
  _id: string;
  _type: 'post';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  author?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'author';
  };
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  tags?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'tag';
  }>;
  body?: BlockContent;
  meta_title?: string;
  meta_description?: string;
  noindex?: boolean;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type Author = {
  _id: string;
  _type: 'author';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
  orderRank?: string;
};

export type Color = {
  _type: 'color';
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: 'rgbaColor';
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: 'hsvaColor';
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: 'hslaColor';
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type Code = {
  _type: 'code';
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | NavItem
  | AllTags
  | AllPosts
  | FormNewsletter
  | Faqs
  | LogoCloud1
  | Cta1
  | Timelines1
  | TimelineRow
  | Carousel2
  | Carousel1
  | GridRow
  | GridPost
  | PricingCard
  | GridCard
  | SplitInfo
  | SplitInfoList
  | SplitImage
  | SplitCard
  | SplitCardsList
  | SplitContent
  | SplitRow
  | SectionHeader
  | Hero2
  | Hero1
  | SectionPadding
  | ButtonVariant
  | ColorVariant
  | Link
  | BlockContent
  | Settings
  | Navigation
  | Testimonial
  | Faq
  | Tag
  | Page
  | Post
  | Author
  | Color
  | RgbaColor
  | HsvaColor
  | HslaColor
  | Code
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./app/sitemap.ts
// Variable: pagesQuery
// Query: *[_type == 'page'] | order(slug.current) {      'url': $baseUrl + select(slug.current == 'index' => '', '/' + slug.current),      'lastModified': _updatedAt,      'changeFrequency': 'daily',      'priority': select(        slug.current == 'index' => 1,        0.5      )    }
export type PagesQueryResult = Array<{
  url: unknown;
  lastModified: string;
  changeFrequency: 'daily';
  priority: 0.5 | 1;
}>;
// Variable: postsQuery
// Query: *[_type == 'post'] | order(_updatedAt desc) {      'url': $baseUrl + '/blog/' + slug.current,      'lastModified': _updatedAt,      'changeFrequency': 'weekly',      'priority': 0.7    }
export type PostsQueryResult = Array<{
  url: unknown;
  lastModified: string;
  changeFrequency: 'weekly';
  priority: 0.7;
}>;

// Source: ./sanity/queries/navigation.ts
// Variable: NAVIGATION_QUERY
// Query: *[_type == "navigation"]{    _type,    _key,    navItems[]{        _key,  title,  page->{    _id,    title,    slug{      current    }  },  hideFromHeader,  hideFromFooter,      subMenu[]{          _key,  title,  page->{    _id,    title,    slug{      current    }  },  hideFromHeader,  hideFromFooter      }    },  }
export type NAVIGATION_QUERYResult = Array<{
  _type: 'navigation';
  _key: null;
  navItems: Array<{
    _key: string;
    title: string | null;
    page: {
      _id: string;
      title: string | null;
      slug: {
        current: string | null;
      } | null;
    } | null;
    hideFromHeader: boolean | null;
    hideFromFooter: boolean | null;
    subMenu: Array<{
      _key: string;
      title: string | null;
      page: {
        _id: string;
        title: string | null;
        slug: {
          current: string | null;
        } | null;
      } | null;
      hideFromHeader: boolean | null;
      hideFromFooter: boolean | null;
    }> | null;
  }> | null;
}>;

// Source: ./sanity/queries/page.ts
// Variable: PAGE_QUERY
// Query: *[_type == "page" && slug.current == $slug][0]{    blocks[]{        _type == "hero-1" => {    _type,    _key,    tagLine,    title,    body[]{        ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  }    },    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    links[]{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "hero-2" => {    _type,    _key,    tagLine,    title,    body[]{        ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  }    },    links[]{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "section-header" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    description,    link{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "split-row" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,    noGap,    splitColumns[]{        _type == "split-content" => {    _type,    _key,    sticky,    padding,    colorVariant,    tagLine,    title,    body[]{        ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  }    },    link{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "split-cards-list" => {    _type,    _key,    list[]{      tagLine,      title,      body[]{          ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  }      },    },  },        _type == "split-image" => {    _type,    _key,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },  },        _type == "split-info-list" => {    _type,    _key,    list[]{      image{          ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }      },      title,      body[]{          ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  }      },      tags[],    },  },    },  },        _type == "grid-row" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,    gridColumns,    columns[]{        _type == "grid-card" => {    _type,    _key,    title,    excerpt,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    link{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "pricing-card" => {    _type,    _key,    title,    tagLine,    price,    list[],    excerpt,    link{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "grid-post" => {    _type,    _key,    post->{      title,      slug,      excerpt,      image{          ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }      },      tags[]->{        _id,        title,        slug,        color,      },    },  },    },  },        _type == "carousel-1" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,    size,    orientation,    indicators,    images[]{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },  },        _type == "carousel-2" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,    testimonial[]->{      _id,      name,      title,      image{          ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }      },      body[]{          ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  }      },      rating,    },  },        _type == "timeline-row" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,    timelines[]{      title,      tagLine,      body[]{          ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  }      },    },  },        _type == "cta-1" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    body[]{        ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  }    },    links[]{          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    },  },        _type == "logo-cloud-1" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,    title,    images[]{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },  },        _type == "faqs" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,    faqs[]->{      _id,      title,      body[]{          ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  }      },    },  },        _type == "form-newsletter" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,    consentText,    buttonText,    successMessage,  },        _type == "all-posts" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,  },        _type == "all-tags" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,  },    },    meta_title,    meta_description,    noindex,    ogImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },    }  }
export type PAGE_QUERYResult = {
  blocks: Array<
    | {
        _type: 'all-posts';
        _key: string;
        padding: SectionPadding | null;
        colorVariant:
          | 'accent'
          | 'background'
          | 'card'
          | 'destructive'
          | 'muted'
          | 'primary'
          | 'secondary'
          | null;
        sectionWidth: 'default' | 'narrow' | null;
        stackAlign: 'center' | 'left' | null;
      }
    | {
        _type: 'all-tags';
        _key: string;
        padding: SectionPadding | null;
        colorVariant:
          | 'accent'
          | 'background'
          | 'card'
          | 'destructive'
          | 'muted'
          | 'primary'
          | 'secondary'
          | null;
        sectionWidth: 'default' | 'narrow' | null;
        stackAlign: 'center' | 'left' | null;
      }
    | {
        _type: 'carousel-1';
        _key: string;
        padding: SectionPadding | null;
        colorVariant:
          | 'accent'
          | 'background'
          | 'card'
          | 'destructive'
          | 'muted'
          | 'primary'
          | 'secondary'
          | null;
        sectionWidth: 'default' | 'narrow' | null;
        stackAlign: 'center' | 'left' | null;
        size: 'one' | 'three' | 'two' | null;
        orientation: null;
        indicators: 'count' | 'dots' | 'none' | null;
        images: Array<{
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: 'image';
          _key: string;
        }> | null;
      }
    | {
        _type: 'carousel-2';
        _key: string;
        padding: SectionPadding | null;
        colorVariant:
          | 'accent'
          | 'background'
          | 'card'
          | 'destructive'
          | 'muted'
          | 'primary'
          | 'secondary'
          | null;
        sectionWidth: 'default' | 'narrow' | null;
        stackAlign: 'center' | 'left' | null;
        testimonial: Array<{
          _id: string;
          name: string | null;
          title: string | null;
          image: {
            asset: {
              _id: string;
              url: string | null;
              mimeType: string | null;
              metadata: {
                lqip: string | null;
                dimensions: {
                  width: number | null;
                  height: number | null;
                } | null;
              } | null;
            } | null;
            media?: unknown;
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
          } | null;
          body: Array<
            | {
                children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: 'span';
                  _key: string;
                }>;
                style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal';
                listItem?: 'bullet' | 'number';
                markDefs: Array<{
                  isExternal?: boolean;
                  internalLink?:
                    | {
                        _ref: string;
                        _type: 'reference';
                        _weak?: boolean;
                        [internalGroqTypeReferenceTo]?: 'page';
                      }
                    | {
                        _ref: string;
                        _type: 'reference';
                        _weak?: boolean;
                        [internalGroqTypeReferenceTo]?: 'post';
                      };
                  href: string | '/' | null;
                  target?: boolean;
                  _type: 'link';
                  _key: string;
                }> | null;
                level?: number;
                _type: 'block';
                _key: string;
              }
            | {
                _key: string;
                _type: 'code';
                language?: string;
                filename?: string;
                code?: string;
                highlightedLines?: Array<number>;
                markDefs: null;
              }
            | {
                asset: {
                  _id: string;
                  url: string | null;
                  mimeType: string | null;
                  metadata: {
                    lqip: string | null;
                    dimensions: {
                      width: number | null;
                      height: number | null;
                    } | null;
                  } | null;
                } | null;
                media?: unknown;
                hotspot?: SanityImageHotspot;
                crop?: SanityImageCrop;
                alt?: string;
                _type: 'image';
                _key: string;
                markDefs: null;
              }
            | {
                videoId?: string;
                _type: 'youtube';
                _key: string;
                markDefs: null;
              }
          > | null;
          rating: number | null;
        }> | null;
      }
    | {
        _type: 'cta-1';
        _key: string;
        padding: SectionPadding | null;
        colorVariant:
          | 'accent'
          | 'background'
          | 'card'
          | 'destructive'
          | 'muted'
          | 'primary'
          | 'secondary'
          | null;
        sectionWidth: 'default' | 'narrow' | null;
        stackAlign: 'center' | 'left' | null;
        tagLine: string | null;
        title: string | null;
        body: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal';
              listItem?: 'bullet' | 'number';
              markDefs: Array<{
                isExternal?: boolean;
                internalLink?:
                  | {
                      _ref: string;
                      _type: 'reference';
                      _weak?: boolean;
                      [internalGroqTypeReferenceTo]?: 'page';
                    }
                  | {
                      _ref: string;
                      _type: 'reference';
                      _weak?: boolean;
                      [internalGroqTypeReferenceTo]?: 'post';
                    };
                href: string | '/' | null;
                target?: boolean;
                _type: 'link';
                _key: string;
              }> | null;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              _key: string;
              _type: 'code';
              language?: string;
              filename?: string;
              code?: string;
              highlightedLines?: Array<number>;
              markDefs: null;
            }
          | {
              asset: {
                _id: string;
                url: string | null;
                mimeType: string | null;
                metadata: {
                  lqip: string | null;
                  dimensions: {
                    width: number | null;
                    height: number | null;
                  } | null;
                } | null;
              } | null;
              media?: unknown;
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              alt?: string;
              _type: 'image';
              _key: string;
              markDefs: null;
            }
          | {
              videoId?: string;
              _type: 'youtube';
              _key: string;
              markDefs: null;
            }
        > | null;
        links: Array<{
          _key: string;
          _type: 'link';
          isExternal?: boolean;
          internalLink?:
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'page';
              }
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'post';
              };
          title?: string;
          href: string | '/' | null;
          target?: boolean;
          buttonVariant?: ButtonVariant;
        }> | null;
      }
    | {
        _type: 'faqs';
        _key: string;
        padding: SectionPadding | null;
        colorVariant:
          | 'accent'
          | 'background'
          | 'card'
          | 'destructive'
          | 'muted'
          | 'primary'
          | 'secondary'
          | null;
        sectionWidth: 'default' | 'narrow' | null;
        stackAlign: 'center' | 'left' | null;
        faqs: Array<{
          _id: string;
          title: string | null;
          body: Array<
            | {
                children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: 'span';
                  _key: string;
                }>;
                style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal';
                listItem?: 'bullet' | 'number';
                markDefs: Array<{
                  isExternal?: boolean;
                  internalLink?:
                    | {
                        _ref: string;
                        _type: 'reference';
                        _weak?: boolean;
                        [internalGroqTypeReferenceTo]?: 'page';
                      }
                    | {
                        _ref: string;
                        _type: 'reference';
                        _weak?: boolean;
                        [internalGroqTypeReferenceTo]?: 'post';
                      };
                  href: string | '/' | null;
                  target?: boolean;
                  _type: 'link';
                  _key: string;
                }> | null;
                level?: number;
                _type: 'block';
                _key: string;
              }
            | {
                _key: string;
                _type: 'code';
                language?: string;
                filename?: string;
                code?: string;
                highlightedLines?: Array<number>;
                markDefs: null;
              }
            | {
                asset: {
                  _id: string;
                  url: string | null;
                  mimeType: string | null;
                  metadata: {
                    lqip: string | null;
                    dimensions: {
                      width: number | null;
                      height: number | null;
                    } | null;
                  } | null;
                } | null;
                media?: unknown;
                hotspot?: SanityImageHotspot;
                crop?: SanityImageCrop;
                alt?: string;
                _type: 'image';
                _key: string;
                markDefs: null;
              }
            | {
                videoId?: string;
                _type: 'youtube';
                _key: string;
                markDefs: null;
              }
          > | null;
        }> | null;
      }
    | {
        _type: 'form-newsletter';
        _key: string;
        padding: SectionPadding | null;
        colorVariant:
          | 'accent'
          | 'background'
          | 'card'
          | 'destructive'
          | 'muted'
          | 'primary'
          | 'secondary'
          | null;
        sectionWidth: 'default' | 'narrow' | null;
        stackAlign: 'center' | 'left' | null;
        consentText: string | null;
        buttonText: string | null;
        successMessage: string | null;
      }
    | {
        _type: 'grid-row';
        _key: string;
        padding: SectionPadding | null;
        colorVariant:
          | 'accent'
          | 'background'
          | 'card'
          | 'destructive'
          | 'muted'
          | 'primary'
          | 'secondary'
          | null;
        sectionWidth: 'default' | 'narrow' | null;
        stackAlign: 'center' | 'left' | null;
        gridColumns: 'grid-cols-2' | 'grid-cols-3' | 'grid-cols-4' | null;
        columns: Array<
          | {
              _type: 'grid-card';
              _key: string;
              title: string | null;
              excerpt: string | null;
              image: {
                asset: {
                  _id: string;
                  url: string | null;
                  mimeType: string | null;
                  metadata: {
                    lqip: string | null;
                    dimensions: {
                      width: number | null;
                      height: number | null;
                    } | null;
                  } | null;
                } | null;
                media?: unknown;
                hotspot?: SanityImageHotspot;
                crop?: SanityImageCrop;
                alt?: string;
                _type: 'image';
              } | null;
              link: {
                _key: null;
                _type: 'link';
                isExternal?: boolean;
                internalLink?:
                  | {
                      _ref: string;
                      _type: 'reference';
                      _weak?: boolean;
                      [internalGroqTypeReferenceTo]?: 'page';
                    }
                  | {
                      _ref: string;
                      _type: 'reference';
                      _weak?: boolean;
                      [internalGroqTypeReferenceTo]?: 'post';
                    };
                title?: string;
                href: string | '/' | null;
                target?: boolean;
                buttonVariant?: ButtonVariant;
              } | null;
            }
          | {
              _type: 'grid-post';
              _key: string;
              post: {
                title: string | null;
                slug: Slug | null;
                excerpt: string | null;
                image: {
                  asset: {
                    _id: string;
                    url: string | null;
                    mimeType: string | null;
                    metadata: {
                      lqip: string | null;
                      dimensions: {
                        width: number | null;
                        height: number | null;
                      } | null;
                    } | null;
                  } | null;
                  media?: unknown;
                  hotspot?: SanityImageHotspot;
                  crop?: SanityImageCrop;
                  alt?: string;
                  _type: 'image';
                } | null;
                tags: Array<{
                  _id: string;
                  title: string | null;
                  slug: Slug | null;
                  color: Color | null;
                }> | null;
              } | null;
            }
          | {
              _type: 'pricing-card';
              _key: string;
              title: string | null;
              tagLine: string | null;
              price: {
                value?: number;
                period?: string;
              } | null;
              list: Array<string> | null;
              excerpt: string | null;
              link: {
                _key: null;
                _type: 'link';
                isExternal?: boolean;
                internalLink?:
                  | {
                      _ref: string;
                      _type: 'reference';
                      _weak?: boolean;
                      [internalGroqTypeReferenceTo]?: 'page';
                    }
                  | {
                      _ref: string;
                      _type: 'reference';
                      _weak?: boolean;
                      [internalGroqTypeReferenceTo]?: 'post';
                    };
                title?: string;
                href: string | '/' | null;
                target?: boolean;
                buttonVariant?: ButtonVariant;
              } | null;
            }
        > | null;
      }
    | {
        _type: 'hero-1';
        _key: string;
        tagLine: string | null;
        title: string | null;
        body: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal';
              listItem?: 'bullet' | 'number';
              markDefs: Array<{
                isExternal?: boolean;
                internalLink?:
                  | {
                      _ref: string;
                      _type: 'reference';
                      _weak?: boolean;
                      [internalGroqTypeReferenceTo]?: 'page';
                    }
                  | {
                      _ref: string;
                      _type: 'reference';
                      _weak?: boolean;
                      [internalGroqTypeReferenceTo]?: 'post';
                    };
                href: string | '/' | null;
                target?: boolean;
                _type: 'link';
                _key: string;
              }> | null;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              _key: string;
              _type: 'code';
              language?: string;
              filename?: string;
              code?: string;
              highlightedLines?: Array<number>;
              markDefs: null;
            }
          | {
              asset: {
                _id: string;
                url: string | null;
                mimeType: string | null;
                metadata: {
                  lqip: string | null;
                  dimensions: {
                    width: number | null;
                    height: number | null;
                  } | null;
                } | null;
              } | null;
              media?: unknown;
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              alt?: string;
              _type: 'image';
              _key: string;
              markDefs: null;
            }
          | {
              videoId?: string;
              _type: 'youtube';
              _key: string;
              markDefs: null;
            }
        > | null;
        image: {
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: 'image';
        } | null;
        links: Array<{
          _key: string;
          _type: 'link';
          isExternal?: boolean;
          internalLink?:
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'page';
              }
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'post';
              };
          title?: string;
          href: string | '/' | null;
          target?: boolean;
          buttonVariant?: ButtonVariant;
        }> | null;
      }
    | {
        _type: 'hero-2';
        _key: string;
        tagLine: string | null;
        title: string | null;
        body: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal';
              listItem?: 'bullet' | 'number';
              markDefs: Array<{
                isExternal?: boolean;
                internalLink?:
                  | {
                      _ref: string;
                      _type: 'reference';
                      _weak?: boolean;
                      [internalGroqTypeReferenceTo]?: 'page';
                    }
                  | {
                      _ref: string;
                      _type: 'reference';
                      _weak?: boolean;
                      [internalGroqTypeReferenceTo]?: 'post';
                    };
                href: string | '/' | null;
                target?: boolean;
                _type: 'link';
                _key: string;
              }> | null;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              _key: string;
              _type: 'code';
              language?: string;
              filename?: string;
              code?: string;
              highlightedLines?: Array<number>;
              markDefs: null;
            }
          | {
              asset: {
                _id: string;
                url: string | null;
                mimeType: string | null;
                metadata: {
                  lqip: string | null;
                  dimensions: {
                    width: number | null;
                    height: number | null;
                  } | null;
                } | null;
              } | null;
              media?: unknown;
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              alt?: string;
              _type: 'image';
              _key: string;
              markDefs: null;
            }
          | {
              videoId?: string;
              _type: 'youtube';
              _key: string;
              markDefs: null;
            }
        > | null;
        links: Array<{
          _key: string;
          _type: 'link';
          isExternal?: boolean;
          internalLink?:
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'page';
              }
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'post';
              };
          title?: string;
          href: string | '/' | null;
          target?: boolean;
          buttonVariant?: ButtonVariant;
        }> | null;
      }
    | {
        _type: 'logo-cloud-1';
        _key: string;
        padding: SectionPadding | null;
        colorVariant:
          | 'accent'
          | 'background'
          | 'card'
          | 'destructive'
          | 'muted'
          | 'primary'
          | 'secondary'
          | null;
        sectionWidth: 'default' | 'narrow' | null;
        stackAlign: 'center' | 'left' | null;
        title: string | null;
        images: Array<{
          asset: {
            _id: string;
            url: string | null;
            mimeType: string | null;
            metadata: {
              lqip: string | null;
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: 'image';
          _key: string;
        }> | null;
      }
    | {
        _type: 'section-header';
        _key: string;
        padding: SectionPadding | null;
        colorVariant:
          | 'accent'
          | 'background'
          | 'card'
          | 'destructive'
          | 'muted'
          | 'primary'
          | 'secondary'
          | null;
        sectionWidth: 'default' | 'narrow' | null;
        stackAlign: 'center' | 'left' | null;
        tagLine: string | null;
        title: string | null;
        description: string | null;
        link: null;
      }
    | {
        _type: 'split-row';
        _key: string;
        padding: SectionPadding | null;
        colorVariant:
          | 'accent'
          | 'background'
          | 'card'
          | 'destructive'
          | 'muted'
          | 'primary'
          | 'secondary'
          | null;
        sectionWidth: 'default' | 'narrow' | null;
        stackAlign: 'center' | 'left' | null;
        noGap: boolean | null;
        splitColumns: Array<
          | {
              _type: 'split-cards-list';
              _key: string;
              list: Array<{
                tagLine: string | null;
                title: string | null;
                body: Array<
                  | {
                      children?: Array<{
                        marks?: Array<string>;
                        text?: string;
                        _type: 'span';
                        _key: string;
                      }>;
                      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal';
                      listItem?: 'bullet' | 'number';
                      markDefs: Array<{
                        isExternal?: boolean;
                        internalLink?:
                          | {
                              _ref: string;
                              _type: 'reference';
                              _weak?: boolean;
                              [internalGroqTypeReferenceTo]?: 'page';
                            }
                          | {
                              _ref: string;
                              _type: 'reference';
                              _weak?: boolean;
                              [internalGroqTypeReferenceTo]?: 'post';
                            };
                        href: string | '/' | null;
                        target?: boolean;
                        _type: 'link';
                        _key: string;
                      }> | null;
                      level?: number;
                      _type: 'block';
                      _key: string;
                    }
                  | {
                      _key: string;
                      _type: 'code';
                      language?: string;
                      filename?: string;
                      code?: string;
                      highlightedLines?: Array<number>;
                      markDefs: null;
                    }
                  | {
                      asset: {
                        _id: string;
                        url: string | null;
                        mimeType: string | null;
                        metadata: {
                          lqip: string | null;
                          dimensions: {
                            width: number | null;
                            height: number | null;
                          } | null;
                        } | null;
                      } | null;
                      media?: unknown;
                      hotspot?: SanityImageHotspot;
                      crop?: SanityImageCrop;
                      alt?: string;
                      _type: 'image';
                      _key: string;
                      markDefs: null;
                    }
                  | {
                      videoId?: string;
                      _type: 'youtube';
                      _key: string;
                      markDefs: null;
                    }
                > | null;
              }> | null;
            }
          | {
              _type: 'split-content';
              _key: string;
              sticky: boolean | null;
              padding: SectionPadding | null;
              colorVariant:
                | 'accent'
                | 'background'
                | 'card'
                | 'destructive'
                | 'muted'
                | 'primary'
                | 'secondary'
                | null;
              tagLine: string | null;
              title: string | null;
              body: Array<
                | {
                    children?: Array<{
                      marks?: Array<string>;
                      text?: string;
                      _type: 'span';
                      _key: string;
                    }>;
                    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal';
                    listItem?: 'bullet' | 'number';
                    markDefs: Array<{
                      isExternal?: boolean;
                      internalLink?:
                        | {
                            _ref: string;
                            _type: 'reference';
                            _weak?: boolean;
                            [internalGroqTypeReferenceTo]?: 'page';
                          }
                        | {
                            _ref: string;
                            _type: 'reference';
                            _weak?: boolean;
                            [internalGroqTypeReferenceTo]?: 'post';
                          };
                      href: string | '/' | null;
                      target?: boolean;
                      _type: 'link';
                      _key: string;
                    }> | null;
                    level?: number;
                    _type: 'block';
                    _key: string;
                  }
                | {
                    _key: string;
                    _type: 'code';
                    language?: string;
                    filename?: string;
                    code?: string;
                    highlightedLines?: Array<number>;
                    markDefs: null;
                  }
                | {
                    asset: {
                      _id: string;
                      url: string | null;
                      mimeType: string | null;
                      metadata: {
                        lqip: string | null;
                        dimensions: {
                          width: number | null;
                          height: number | null;
                        } | null;
                      } | null;
                    } | null;
                    media?: unknown;
                    hotspot?: SanityImageHotspot;
                    crop?: SanityImageCrop;
                    alt?: string;
                    _type: 'image';
                    _key: string;
                    markDefs: null;
                  }
                | {
                    videoId?: string;
                    _type: 'youtube';
                    _key: string;
                    markDefs: null;
                  }
              > | null;
              link: {
                _key: null;
                _type: 'link';
                isExternal?: boolean;
                internalLink?:
                  | {
                      _ref: string;
                      _type: 'reference';
                      _weak?: boolean;
                      [internalGroqTypeReferenceTo]?: 'page';
                    }
                  | {
                      _ref: string;
                      _type: 'reference';
                      _weak?: boolean;
                      [internalGroqTypeReferenceTo]?: 'post';
                    };
                title?: string;
                href: string | '/' | null;
                target?: boolean;
                buttonVariant?: ButtonVariant;
              } | null;
            }
          | {
              _type: 'split-image';
              _key: string;
              image: {
                asset: {
                  _id: string;
                  url: string | null;
                  mimeType: string | null;
                  metadata: {
                    lqip: string | null;
                    dimensions: {
                      width: number | null;
                      height: number | null;
                    } | null;
                  } | null;
                } | null;
                media?: unknown;
                hotspot?: SanityImageHotspot;
                crop?: SanityImageCrop;
                alt?: string;
                _type: 'image';
              } | null;
            }
          | {
              _type: 'split-info-list';
              _key: string;
              list: Array<{
                image: {
                  asset: {
                    _id: string;
                    url: string | null;
                    mimeType: string | null;
                    metadata: {
                      lqip: string | null;
                      dimensions: {
                        width: number | null;
                        height: number | null;
                      } | null;
                    } | null;
                  } | null;
                  media?: unknown;
                  hotspot?: SanityImageHotspot;
                  crop?: SanityImageCrop;
                  alt?: string;
                  _type: 'image';
                } | null;
                title: string | null;
                body: Array<
                  | {
                      children?: Array<{
                        marks?: Array<string>;
                        text?: string;
                        _type: 'span';
                        _key: string;
                      }>;
                      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal';
                      listItem?: 'bullet' | 'number';
                      markDefs: Array<{
                        isExternal?: boolean;
                        internalLink?:
                          | {
                              _ref: string;
                              _type: 'reference';
                              _weak?: boolean;
                              [internalGroqTypeReferenceTo]?: 'page';
                            }
                          | {
                              _ref: string;
                              _type: 'reference';
                              _weak?: boolean;
                              [internalGroqTypeReferenceTo]?: 'post';
                            };
                        href: string | '/' | null;
                        target?: boolean;
                        _type: 'link';
                        _key: string;
                      }> | null;
                      level?: number;
                      _type: 'block';
                      _key: string;
                    }
                  | {
                      _key: string;
                      _type: 'code';
                      language?: string;
                      filename?: string;
                      code?: string;
                      highlightedLines?: Array<number>;
                      markDefs: null;
                    }
                  | {
                      asset: {
                        _id: string;
                        url: string | null;
                        mimeType: string | null;
                        metadata: {
                          lqip: string | null;
                          dimensions: {
                            width: number | null;
                            height: number | null;
                          } | null;
                        } | null;
                      } | null;
                      media?: unknown;
                      hotspot?: SanityImageHotspot;
                      crop?: SanityImageCrop;
                      alt?: string;
                      _type: 'image';
                      _key: string;
                      markDefs: null;
                    }
                  | {
                      videoId?: string;
                      _type: 'youtube';
                      _key: string;
                      markDefs: null;
                    }
                > | null;
                tags: Array<string> | null;
              }> | null;
            }
        > | null;
      }
    | {
        _type: 'timeline-row';
        _key: string;
        padding: SectionPadding | null;
        colorVariant:
          | 'accent'
          | 'background'
          | 'card'
          | 'destructive'
          | 'muted'
          | 'primary'
          | 'secondary'
          | null;
        sectionWidth: 'default' | 'narrow' | null;
        stackAlign: 'center' | 'left' | null;
        timelines: Array<{
          title: string | null;
          tagLine: string | null;
          body: Array<
            | {
                children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: 'span';
                  _key: string;
                }>;
                style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal';
                listItem?: 'bullet' | 'number';
                markDefs: Array<{
                  isExternal?: boolean;
                  internalLink?:
                    | {
                        _ref: string;
                        _type: 'reference';
                        _weak?: boolean;
                        [internalGroqTypeReferenceTo]?: 'page';
                      }
                    | {
                        _ref: string;
                        _type: 'reference';
                        _weak?: boolean;
                        [internalGroqTypeReferenceTo]?: 'post';
                      };
                  href: string | '/' | null;
                  target?: boolean;
                  _type: 'link';
                  _key: string;
                }> | null;
                level?: number;
                _type: 'block';
                _key: string;
              }
            | {
                _key: string;
                _type: 'code';
                language?: string;
                filename?: string;
                code?: string;
                highlightedLines?: Array<number>;
                markDefs: null;
              }
            | {
                asset: {
                  _id: string;
                  url: string | null;
                  mimeType: string | null;
                  metadata: {
                    lqip: string | null;
                    dimensions: {
                      width: number | null;
                      height: number | null;
                    } | null;
                  } | null;
                } | null;
                media?: unknown;
                hotspot?: SanityImageHotspot;
                crop?: SanityImageCrop;
                alt?: string;
                _type: 'image';
                _key: string;
                markDefs: null;
              }
            | {
                videoId?: string;
                _type: 'youtube';
                _key: string;
                markDefs: null;
              }
          > | null;
        }> | null;
      }
  > | null;
  meta_title: string | null;
  meta_description: string | null;
  noindex: boolean | null;
  ogImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
  } | null;
} | null;
// Variable: PAGES_SLUGS_QUERY
// Query: *[_type == "page" && defined(slug)]{slug}
export type PAGES_SLUGS_QUERYResult = Array<{
  slug: Slug | null;
}>;

// Source: ./sanity/queries/post.ts
// Variable: POST_QUERY
// Query: *[_type == "post" && slug.current == $slug][0]{    title,    slug,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    body[]{        ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  }    },    author->{      name,      image {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      }    },    _createdAt,    _updatedAt,    meta_title,    meta_description,    noindex,    ogImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },    }}
export type POST_QUERYResult = {
  title: string | null;
  slug: Slug | null;
  image: {
    asset: {
      _id: string;
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  } | null;
  body: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal';
        listItem?: 'bullet' | 'number';
        markDefs: Array<{
          isExternal?: boolean;
          internalLink?:
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'page';
              }
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'post';
              };
          href: string | '/' | null;
          target?: boolean;
          _type: 'link';
          _key: string;
        }> | null;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        _key: string;
        _type: 'code';
        language?: string;
        filename?: string;
        code?: string;
        highlightedLines?: Array<number>;
        markDefs: null;
      }
    | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
        markDefs: null;
      }
    | {
        videoId?: string;
        _type: 'youtube';
        _key: string;
        markDefs: null;
      }
  > | null;
  author: {
    name: string | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string | null;
      _type: 'image';
    } | null;
  } | null;
  _createdAt: string;
  _updatedAt: string;
  meta_title: string | null;
  meta_description: string | null;
  noindex: boolean | null;
  ogImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
  } | null;
} | null;
// Variable: POSTS_QUERY
// Query: *[_type == "post" && defined(slug)] | order(_createdAt desc){    title,    slug,    excerpt,    image{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    tags[]->{      _id,      title,      slug,      color,    },}
export type POSTS_QUERYResult = Array<{
  title: string | null;
  slug: Slug | null;
  excerpt: string | null;
  image: {
    asset: {
      _id: string;
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  } | null;
  tags: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
    color: Color | null;
  }> | null;
}>;
// Variable: POSTS_SLUGS_QUERY
// Query: *[_type == "post" && defined(slug)]{slug}
export type POSTS_SLUGS_QUERYResult = Array<{
  slug: Slug | null;
}>;

// Source: ./sanity/queries/settings.ts
// Variable: SETTINGS_QUERY
// Query: *[_type == "settings"][0]{  _type,  siteName,  logo{    dark{      ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      }    },    light{      ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      }    },    width,    height,  },  copyright}
export type SETTINGS_QUERYResult = {
  _type: 'settings';
  siteName: string | null;
  logo: {
    dark: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    light: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    width: number | null;
    height: number | null;
  } | null;
  copyright: BlockContent | null;
} | null;

// Source: ./sanity/queries/tag.ts
// Variable: TAG_QUERY
// Query: *[_type == "tag" && slug.current == $slug][0]{    _id,    title,    slug,    color,    body[]{        ...,  markDefs[]{    ...,    _type == "link" => {          _key,    ...,    "href": select(      isExternal => href,      defined(href) && !defined(internalLink) => href,      @.internalLink->slug.current == "index" => "/",      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,      "/" + @.internalLink->slug.current    )    }  },  _type == "image" => {      ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }  }    },    meta_title,    meta_description,    noindex,    ogImage{        ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }    },    "posts": *[_type == "post" && references(^._id)]{      _id,      title,      slug,      excerpt,      author->{        name,        slug      },      image{          ...,  asset->{    _id,    url,    mimeType,    metadata {      lqip,      dimensions {        width,        height      }    }  }      },      tags[]->{        _id,        title,        slug,        color      }    }  }
export type TAG_QUERYResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  color: Color | null;
  body: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal';
        listItem?: 'bullet' | 'number';
        markDefs: Array<{
          isExternal?: boolean;
          internalLink?:
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'page';
              }
            | {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'post';
              };
          href: string | '/' | null;
          target?: boolean;
          _type: 'link';
          _key: string;
        }> | null;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        _key: string;
        _type: 'code';
        language?: string;
        filename?: string;
        code?: string;
        highlightedLines?: Array<number>;
        markDefs: null;
      }
    | {
        asset: {
          _id: string;
          url: string | null;
          mimeType: string | null;
          metadata: {
            lqip: string | null;
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: 'image';
        _key: string;
        markDefs: null;
      }
    | {
        videoId?: string;
        _type: 'youtube';
        _key: string;
        markDefs: null;
      }
  > | null;
  meta_title: string | null;
  meta_description: string | null;
  noindex: boolean | null;
  ogImage: {
    asset: {
      _id: string;
      url: string | null;
      mimeType: string | null;
      metadata: {
        lqip: string | null;
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  } | null;
  posts: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
    excerpt: string | null;
    author: {
      name: string | null;
      slug: Slug | null;
    } | null;
    image: {
      asset: {
        _id: string;
        url: string | null;
        mimeType: string | null;
        metadata: {
          lqip: string | null;
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: 'image';
    } | null;
    tags: Array<{
      _id: string;
      title: string | null;
      slug: Slug | null;
      color: Color | null;
    }> | null;
  }>;
} | null;
// Variable: TAGS_QUERY
// Query: *[_type == "tag" && defined(slug)]{  _id,  title,  slug,  color,}
export type TAGS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  color: Color | null;
}>;
// Variable: TAGS_SLUGS_QUERY
// Query: *[_type == "tag" && defined(slug)]{slug}
export type TAGS_SLUGS_QUERYResult = Array<{
  slug: Slug | null;
}>;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    "\n    *[_type == 'page'] | order(slug.current) {\n      'url': $baseUrl + select(slug.current == 'index' => '', '/' + slug.current),\n      'lastModified': _updatedAt,\n      'changeFrequency': 'daily',\n      'priority': select(\n        slug.current == 'index' => 1,\n        0.5\n      )\n    }\n  ": PagesQueryResult;
    "\n    *[_type == 'post'] | order(_updatedAt desc) {\n      'url': $baseUrl + '/blog/' + slug.current,\n      'lastModified': _updatedAt,\n      'changeFrequency': 'weekly',\n      'priority': 0.7\n    }\n  ": PostsQueryResult;
    '\n  *[_type == "navigation"]{\n    _type,\n    _key,\n    navItems[]{\n      \n  _key,\n  title,\n  page->{\n    _id,\n    title,\n    slug{\n      current\n    }\n  },\n  hideFromHeader,\n  hideFromFooter\n,\n      subMenu[]{\n        \n  _key,\n  title,\n  page->{\n    _id,\n    title,\n    slug{\n      current\n    }\n  },\n  hideFromHeader,\n  hideFromFooter\n\n      }\n    },\n  }\n': NAVIGATION_QUERYResult;
    '\n  *[_type == "page" && slug.current == $slug][0]{\n    blocks[]{\n      \n  _type == "hero-1" => {\n    _type,\n    _key,\n    tagLine,\n    title,\n    body[]{\n      \n  ...,\n  markDefs[]{\n    ...,\n    _type == "link" => {\n      \n    _key,\n    ...,\n    "href": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == "index" => "/",\n      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,\n      "/" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == "image" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  }\n\n    },\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    links[]{\n      \n    _key,\n    ...,\n    "href": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == "index" => "/",\n      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,\n      "/" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == "hero-2" => {\n    _type,\n    _key,\n    tagLine,\n    title,\n    body[]{\n      \n  ...,\n  markDefs[]{\n    ...,\n    _type == "link" => {\n      \n    _key,\n    ...,\n    "href": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == "index" => "/",\n      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,\n      "/" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == "image" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  }\n\n    },\n    links[]{\n      \n    _key,\n    ...,\n    "href": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == "index" => "/",\n      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,\n      "/" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == "section-header" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    description,\n    link{\n      \n    _key,\n    ...,\n    "href": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == "index" => "/",\n      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,\n      "/" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == "split-row" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    noGap,\n    splitColumns[]{\n      \n  _type == "split-content" => {\n    _type,\n    _key,\n    sticky,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    body[]{\n      \n  ...,\n  markDefs[]{\n    ...,\n    _type == "link" => {\n      \n    _key,\n    ...,\n    "href": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == "index" => "/",\n      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,\n      "/" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == "image" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  }\n\n    },\n    link{\n      \n    _key,\n    ...,\n    "href": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == "index" => "/",\n      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,\n      "/" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == "split-cards-list" => {\n    _type,\n    _key,\n    list[]{\n      tagLine,\n      title,\n      body[]{\n        \n  ...,\n  markDefs[]{\n    ...,\n    _type == "link" => {\n      \n    _key,\n    ...,\n    "href": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == "index" => "/",\n      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,\n      "/" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == "image" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  }\n\n      },\n    },\n  }\n,\n      \n  _type == "split-image" => {\n    _type,\n    _key,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n  }\n,\n      \n  _type == "split-info-list" => {\n    _type,\n    _key,\n    list[]{\n      image{\n        \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n      },\n      title,\n      body[]{\n        \n  ...,\n  markDefs[]{\n    ...,\n    _type == "link" => {\n      \n    _key,\n    ...,\n    "href": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == "index" => "/",\n      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,\n      "/" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == "image" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  }\n\n      },\n      tags[],\n    },\n  }\n,\n    },\n  }\n,\n      \n  _type == "grid-row" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    gridColumns,\n    columns[]{\n      \n  _type == "grid-card" => {\n    _type,\n    _key,\n    title,\n    excerpt,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    link{\n      \n    _key,\n    ...,\n    "href": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == "index" => "/",\n      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,\n      "/" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == "pricing-card" => {\n    _type,\n    _key,\n    title,\n    tagLine,\n    price,\n    list[],\n    excerpt,\n    link{\n      \n    _key,\n    ...,\n    "href": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == "index" => "/",\n      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,\n      "/" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == "grid-post" => {\n    _type,\n    _key,\n    post->{\n      title,\n      slug,\n      excerpt,\n      image{\n        \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n      },\n      tags[]->{\n        _id,\n        title,\n        slug,\n        color,\n      },\n    },\n  }\n,\n    },\n  }\n,\n      \n  _type == "carousel-1" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    size,\n    orientation,\n    indicators,\n    images[]{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n  }\n,\n      \n  _type == "carousel-2" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    testimonial[]->{\n      _id,\n      name,\n      title,\n      image{\n        \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n      },\n      body[]{\n        \n  ...,\n  markDefs[]{\n    ...,\n    _type == "link" => {\n      \n    _key,\n    ...,\n    "href": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == "index" => "/",\n      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,\n      "/" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == "image" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  }\n\n      },\n      rating,\n    },\n  }\n,\n      \n  _type == "timeline-row" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    timelines[]{\n      title,\n      tagLine,\n      body[]{\n        \n  ...,\n  markDefs[]{\n    ...,\n    _type == "link" => {\n      \n    _key,\n    ...,\n    "href": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == "index" => "/",\n      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,\n      "/" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == "image" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  }\n\n      },\n    },\n  }\n,\n      \n  _type == "cta-1" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    body[]{\n      \n  ...,\n  markDefs[]{\n    ...,\n    _type == "link" => {\n      \n    _key,\n    ...,\n    "href": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == "index" => "/",\n      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,\n      "/" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == "image" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  }\n\n    },\n    links[]{\n      \n    _key,\n    ...,\n    "href": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == "index" => "/",\n      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,\n      "/" + @.internalLink->slug.current\n    )\n\n    },\n  }\n,\n      \n  _type == "logo-cloud-1" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    title,\n    images[]{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n  }\n,\n      \n  _type == "faqs" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    faqs[]->{\n      _id,\n      title,\n      body[]{\n        \n  ...,\n  markDefs[]{\n    ...,\n    _type == "link" => {\n      \n    _key,\n    ...,\n    "href": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == "index" => "/",\n      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,\n      "/" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == "image" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  }\n\n      },\n    },\n  }\n,\n      \n  _type == "form-newsletter" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    consentText,\n    buttonText,\n    successMessage,\n  }\n,\n      \n  _type == "all-posts" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n  }\n,\n      \n  _type == "all-tags" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n  }\n,\n    },\n    meta_title,\n    meta_description,\n    noindex,\n    ogImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n    }\n  }\n': PAGE_QUERYResult;
    '*[_type == "page" && defined(slug)]{slug}': PAGES_SLUGS_QUERYResult;
    '*[_type == "post" && slug.current == $slug][0]{\n    title,\n    slug,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    body[]{\n      \n  ...,\n  markDefs[]{\n    ...,\n    _type == "link" => {\n      \n    _key,\n    ...,\n    "href": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == "index" => "/",\n      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,\n      "/" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == "image" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  }\n\n    },\n    author->{\n      name,\n      image {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      }\n    },\n    _createdAt,\n    _updatedAt,\n    meta_title,\n    meta_description,\n    noindex,\n    ogImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n    }\n}': POST_QUERYResult;
    '*[_type == "post" && defined(slug)] | order(_createdAt desc){\n    title,\n    slug,\n    excerpt,\n    image{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    tags[]->{\n      _id,\n      title,\n      slug,\n      color,\n    },\n}': POSTS_QUERYResult;
    '*[_type == "post" && defined(slug)]{slug}': POSTS_SLUGS_QUERYResult;
    '*[_type == "settings"][0]{\n  _type,\n  siteName,\n  logo{\n    dark{\n      ...,\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      }\n    },\n    light{\n      ...,\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      }\n    },\n    width,\n    height,\n  },\n  copyright\n}': SETTINGS_QUERYResult;
    '*[_type == "tag" && slug.current == $slug][0]{\n    _id,\n    title,\n    slug,\n    color,\n    body[]{\n      \n  ...,\n  markDefs[]{\n    ...,\n    _type == "link" => {\n      \n    _key,\n    ...,\n    "href": select(\n      isExternal => href,\n      defined(href) && !defined(internalLink) => href,\n      @.internalLink->slug.current == "index" => "/",\n      @.internalLink->_type == "post" => "/blog/" + @.internalLink->slug.current,\n      "/" + @.internalLink->slug.current\n    )\n\n    }\n  },\n  _type == "image" => {\n    \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n  }\n\n    },\n    meta_title,\n    meta_description,\n    noindex,\n    ogImage{\n      \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n    },\n    "posts": *[_type == "post" && references(^._id)]{\n      _id,\n      title,\n      slug,\n      excerpt,\n      author->{\n        name,\n        slug\n      },\n      image{\n        \n  ...,\n  asset->{\n    _id,\n    url,\n    mimeType,\n    metadata {\n      lqip,\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n      },\n      tags[]->{\n        _id,\n        title,\n        slug,\n        color\n      }\n    }\n  }\n': TAG_QUERYResult;
    '*[_type == "tag" && defined(slug)]{\n  _id,\n  title,\n  slug,\n  color,\n}': TAGS_QUERYResult;
    '*[_type == "tag" && defined(slug)]{slug}': TAGS_SLUGS_QUERYResult;
  }
}
